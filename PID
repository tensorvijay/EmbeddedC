#include <stdio.h>

// PID Controller Structure
typedef struct {
    float Kp;  // Proportional gain
    float Ki;  // Integral gain
    float Kd;  // Derivative gain
    float setpoint;  // Desired value
    float prev_error;  // Previous error value (for derivative calculation)
    float integral;  // Integral accumulator
} PID_Controller;

// PID controller initialization
void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float setpoint) {
    pid->Kp = Kp;
    pid->Ki = Ki;
    pid->Kd = Kd;
    pid->setpoint = setpoint;
    pid->prev_error = 0.0;
    pid->integral = 0.0;
}

// PID calculation
float PID_Compute(PID_Controller *pid, float measured_value, float dt) {
    // Calculate error
    float error = pid->setpoint - measured_value;

    // Proportional term
    float P_out = pid->Kp * error;

    // Integral term
    pid->integral += error * dt;
    float I_out = pid->Ki * pid->integral;

    // Derivative term
    float derivative = (error - pid->prev_error) / dt;
    float D_out = pid->Kd * derivative;

    // Save error for the next cycle
    pid->prev_error = error;

    // Calculate total output
    float output = P_out + I_out + D_out;

    return output;
}

int main() {
    // Initialize PID Controller with sample gains and target setpoint
    PID_Controller pid;
    PID_Init(&pid, 1.0, 0.1, 0.05, 100.0);  // Kp, Ki, Kd, setpoint

    // Example operation: Let's say we want to control a value to reach 100
    float measured_value = 20.0;  // Starting measured value
    float dt = 0.1;  // Time step (100 ms)
    float control_output;

    // Simulate the control loop
    for (int i = 0; i < 50; i++) {  // Run 50 iterations
        // Compute the control output
        control_output = PID_Compute(&pid, measured_value, dt);

        // Simulate the system's response to control output (simple model)
        // Here, we assume control_output directly influences measured_value
        measured_value += control_output * dt;

        // Print the current status
        printf("Step %d: Control Output = %.2f, Measured Value = %.2f\n", i, control_output, measured_value);
    }

    return 0;
}
